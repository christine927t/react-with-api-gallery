{"version":3,"sources":["Components/Nav.js","Components/Search.js","Components/Photo.js","Components/NoResults.js","Components/Gallery.js","Components/NotFound.js","App.js","config.js","serviceWorker.js","index.js"],"names":["Nav","props","className","to","Search","state","searchText","query","match","params","onSearchChange","e","setState","target","value","console","log","handleSubmit","preventDefault","searchKeyword","onSearch","path","history","push","currentTarget","reset","onSubmit","this","type","onChange","name","ref","input","placeholder","required","fill","height","viewBox","width","xmlns","d","React","Component","withRouter","Photo","src","url","alt","NoResults","Gallery","results","data","photos","title","length","map","photo","farm","server","id","secret","key","NotFound","randomWords","require","window","location","search","URL","searchParams","get","App","performSearch","axios","then","response","loading","mountain","forest","beach","random","pictures","catch","error","exact","render","component","Boolean","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.bf657de4.chunk.js","sourcesContent":["import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nconst Nav = (props) => {\n  return (\n    <nav className=\"main-nav\">\n      <ul>\n        <li><NavLink to='/mountain'>mountain</NavLink></li>\n        <li><NavLink to='/forest'>forest</NavLink></li>\n        <li><NavLink to='/beach'>beach</NavLink></li>\n      </ul>\n      <ul>\n        <li className='random'><NavLink to='/search/:random'>feeling random</NavLink></li>\n      </ul>\n    </nav>\n  )\n}\n\nexport default Nav;\n","import React from 'react';\nimport { withRouter } from 'react-router-dom'\n\nclass Search extends React.Component {\n  state = {\n    searchText: '',\n    query: this.props.match.params.query\n  };\n\n  onSearchChange = e => {\n    this.setState({ searchText: e.target.value });\n    console.log(this.query.value)\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    let searchKeyword = this.query.value;\n    this.props.onSearch(this.query.value);\n    let path = `/search/${searchKeyword}`;\n    this.props.history.push(path);\n    e.currentTarget.reset();\n  };\n\n  render() {\n    return (\n      <div className='header'>\n        <h1 className='heading'>photo search</h1>\n        <form className=\"search-form\" onSubmit={this.handleSubmit}>\n          <input type=\"search\"\n            onChange={this.onSearchChange}\n            name=\"search\"\n            ref={(input) => this.query = input}\n            placeholder=\"Search\" required />\n          <button type=\"submit\" className=\"search-button\">\n            <svg fill=\"#fff\" height=\"24\" viewBox=\"0 0 23 23\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n              <path d=\"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z\" />\n              <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n            </svg>\n          </button>\n        </form>\n      </div>\n    )\n  }\n}\n\nexport default withRouter(Search);\n","import React from 'react';\n\nconst Photo = props => {\n    return (\n        <li>\n            <img src={props.url} alt=\"\" />\n        </li>\n    )\n}\n\n\n\nexport default Photo;","import React from 'react';\n\nconst NoResults = () => (\n    <li className=\"not-found\">\n        <h3>No Results Found</h3>\n        <p>You search did not return any results. Please try again.</p>\n    </li>\n)\n\nexport default NoResults;","import React from 'react';\nimport Photo from './Photo';\nimport NoResults from './NoResults';\n\nconst Gallery = (props, { match }) => {\n    let results = props.data;\n    console.log(results);\n    let photos = ' '\n    let title = props.query;\n\n\n    if (results.length > 0) {\n        photos = results.map(photo => <Photo url={`https://farm${photo.farm}.staticflickr.com/${photo.server}/${photo.id}_${photo.secret}.jpg`} key={photo.id} />);\n    } else {\n        photos = <NoResults />\n    }\n\n    return (\n        <div className=\"photo-container\">\n            <h2>\"{title}\"</h2>\n            <ul>\n                {photos}\n            </ul>\n        </div>\n    )\n}\n\nexport default Gallery;\n","import React from 'react';\n\nconst NotFound = () => (\n    <div className=\"not-found\">\n        <h2>Not Found</h2>\n    </div>\n);\n\nexport default NotFound;","import React, { Component } from 'react';\nimport {\n  BrowserRouter,\n  Route,\n  Switch,\n  Redirect\n} from 'react-router-dom';\nimport axios from 'axios';\nimport './App.css';\nimport apiKey from './config.js';\n\n//import components\nimport Nav from './Components/Nav';\nimport Search from './Components/Search';\nimport Gallery from './Components/Gallery';\nimport NotFound from './Components/NotFound';\nconst randomWords = require('random-words');\nconsole.log(randomWords());\n\n//get URL for search query word\nconst url = window.location\nconsole.log(url)\nconst urlObject = new URL(url);\nconst search = urlObject.searchParams.get('search')\nconsole.log(search)\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      pictures: [],\n      mountain: [],\n      forest: [],\n      beach: [],\n      random: [],\n      query: '',\n      search: search,\n      loading: true\n    }\n  }\n\n  componentDidMount(props) {\n    this.performSearch(\"mountain\");\n    this.performSearch(\"forest\");\n    this.performSearch(\"beach\");\n    this.performSearch(randomWords());\n    if (search != null) {\n      this.performSearch(search);\n    }\n  }\n\n  performSearch = (query) => {\n    axios.get(`https://www.flickr.com/services/rest/?method=flickr.photos.search&api_key=${apiKey}&tags=${query}&per_page=24&format=json&nojsoncallback=1`)\n      .then(response => {\n        // console.log(query)\n        this.setState({ query: query, loading: false });\n        if (query === 'mountain') {\n          this.setState({ mountain: response.data.photos.photo });\n        } else if (query === 'forest') {\n          this.setState({ forest: response.data.photos.photo });\n        } else if (query === 'beach') {\n          this.setState({ beach: response.data.photos.photo });\n        } else if (query === randomWords()) {\n          this.setState({ random: response.data.photos.photo });\n        } else {\n          this.setState({ pictures: response.data.photos.photo });\n        }\n      })\n      .catch(error => {\n        console.log(\"Error fetching data\", error);\n      })\n  }\n\n  render() {\n    return (\n      <BrowserRouter>\n        <div className=\"container\">\n          <Search onSearch={this.performSearch} />\n          <Nav />\n          <Switch>\n            <Route exact path=\"/\" render={() => <Redirect to=\"/mountain\" />} />\n            <Route path=\"/mountain\" render={() => <Gallery data={this.state.mountain} onSearch={this.performSearch} loading={this.state.loading} query=\"mountain\" />} />\n            <Route path=\"/forest\" render={() => <Gallery data={this.state.forest} onSearch={this.performSearch} loading={this.state.loading} query=\"forest\" />} />\n            <Route path=\"/beach\" render={() => <Gallery data={this.state.beach} onSearch={this.performSearch} loading={this.state.loading} query=\"beach\" />} />\n            <Route path=\"/search/:random\" render={() => <Gallery data={this.state.random} onSearch={this.performSearch} loading={this.state.loading} query={this.state.random} />} />\n            <Route path=\"/?search=:query\" render={() => <Gallery data={this.state.pictures} onSearch={this.performSearch} loading={this.state.loading} query={this.state.query} />} />\n            <Route component={NotFound} />\n          </Switch>\n        </div>\n      </BrowserRouter>\n    )\n  }\n};\n","const apiKey = \"adf8e835e70c5cce9208376d343d7ab8\";\nexport default apiKey;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import { BrowserRouter, Route } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);\n\n// ReactDOM.render(\n//     <BrowserRouter>>\n//         <Route path=\"/\" component={App} />\n//     </BrowserRouter>\n// ,    document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}