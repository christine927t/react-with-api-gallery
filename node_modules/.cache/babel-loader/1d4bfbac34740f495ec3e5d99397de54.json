{"ast":null,"code":"var _jsxFileName = \"/Users/christinetreacy/Documents/GitHub/react-gallery-app/src/App.js\";\nimport React, { Component } from 'react';\nimport { BrowserRouter, Route, Switch, Redirect } from 'react-router-dom';\nimport axios from 'axios';\nimport './App.css';\nimport apiKey from './config.js'; //import components\n\nimport Nav from './Components/Nav';\nimport Search from './Components/Search';\nimport Gallery from './Components/Gallery';\nimport NotFound from './Components/NotFound'; // const randomWords = require('random-words');\n// console.log(randomWords());\n//get URL for search query word\n\nconst url = window.location; // console.log(url)\n\nconst urlObject = new URL(url);\nconst search = urlObject.searchParams.get('search');\nconsole.log(search);\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.performSearch = query => {\n      axios.get(`https://www.flickr.com/services/rest/?method=flickr.photos.search&api_key=${apiKey}&tags=${query}&per_page=24&format=json&nojsoncallback=1`).then(response => {\n        // console.log(query)\n        this.setState({\n          query: query,\n          loading: false\n        });\n\n        if (query === 'mountain') {\n          this.setState({\n            mountain: response.data.photos.photo\n          });\n        } else if (query === 'forest') {\n          this.setState({\n            forest: response.data.photos.photo\n          });\n        } else if (query === 'beach') {\n          this.setState({\n            beach: response.data.photos.photo\n          });\n        } // else if (query === randomWords()) {\n        //   this.setState({ random: response.data.photos.photo });\n        // } \n        else {\n            this.setState({\n              pictures: response.data.photos.photo\n            });\n            console.log(this.state.pictures);\n            console.log(this.state.query);\n          }\n      }).catch(error => {\n        console.log(\"Error fetching data\", error);\n      });\n    };\n\n    this.state = {\n      pictures: [],\n      mountain: [],\n      forest: [],\n      beach: [],\n      random: [],\n      query: '',\n      search: search,\n      loading: true\n    };\n  }\n\n  componentDidMount(props) {\n    this.performSearch(\"mountain\");\n    this.performSearch(\"forest\");\n    this.performSearch(\"beach\"); // this.performSearch(randomWords());\n\n    if (search != null) {\n      this.performSearch(search);\n    }\n  }\n\n  render() {\n    return React.createElement(BrowserRouter, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, React.createElement(Search, {\n      onSearch: this.performSearch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }), React.createElement(Nav, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }), React.createElement(Switch, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, React.createElement(Route, {\n      exact: true,\n      path: \"/\",\n      render: () => React.createElement(Redirect, {\n        to: \"/mountain\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/mountain\",\n      render: () => React.createElement(Gallery, {\n        data: this.state.mountain,\n        onSearch: this.performSearch,\n        loading: this.state.loading,\n        query: \"mountain\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/forest\",\n      render: () => React.createElement(Gallery, {\n        data: this.state.forest,\n        onSearch: this.performSearch,\n        loading: this.state.loading,\n        query: \"forest\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/beach\",\n      render: () => React.createElement(Gallery, {\n        data: this.state.beach,\n        onSearch: this.performSearch,\n        loading: this.state.loading,\n        query: \"beach\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/?search/:query\",\n      render: () => React.createElement(Gallery, {\n        data: this.state.pictures,\n        onSearch: this.performSearch,\n        loading: this.state.loading,\n        query: this.state.query,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }), React.createElement(Route, {\n      component: NotFound,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }))));\n  }\n\n}\n;","map":{"version":3,"sources":["/Users/christinetreacy/Documents/GitHub/react-gallery-app/src/App.js"],"names":["React","Component","BrowserRouter","Route","Switch","Redirect","axios","apiKey","Nav","Search","Gallery","NotFound","url","window","location","urlObject","URL","search","searchParams","get","console","log","App","constructor","props","performSearch","query","then","response","setState","loading","mountain","data","photos","photo","forest","beach","pictures","state","catch","error","random","componentDidMount","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {\n  BrowserRouter,\n  Route,\n  Switch,\n  Redirect\n} from 'react-router-dom';\nimport axios from 'axios';\nimport './App.css';\nimport apiKey from './config.js';\n\n//import components\nimport Nav from './Components/Nav';\nimport Search from './Components/Search';\nimport Gallery from './Components/Gallery';\nimport NotFound from './Components/NotFound';\n// const randomWords = require('random-words');\n// console.log(randomWords());\n\n//get URL for search query word\nconst url = window.location\n// console.log(url)\nconst urlObject = new URL(url);\nconst search = urlObject.searchParams.get('search')\nconsole.log(search)\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      pictures: [],\n      mountain: [],\n      forest: [],\n      beach: [],\n      random: [],\n      query: '',\n      search: search,\n      loading: true\n    }\n  }\n\n  componentDidMount(props) {\n    this.performSearch(\"mountain\");\n    this.performSearch(\"forest\");\n    this.performSearch(\"beach\");\n    // this.performSearch(randomWords());\n    if (search != null) {\n      this.performSearch(search);\n    }\n  }\n\n  performSearch = (query) => {\n    axios.get(`https://www.flickr.com/services/rest/?method=flickr.photos.search&api_key=${apiKey}&tags=${query}&per_page=24&format=json&nojsoncallback=1`)\n      .then(response => {\n        // console.log(query)\n        this.setState({ query: query, loading: false });\n        if (query === 'mountain') {\n          this.setState({ mountain: response.data.photos.photo });\n        } else if (query === 'forest') {\n          this.setState({ forest: response.data.photos.photo });\n        } else if (query === 'beach') {\n          this.setState({ beach: response.data.photos.photo });\n        } \n        // else if (query === randomWords()) {\n        //   this.setState({ random: response.data.photos.photo });\n        // } \n        else {\n          this.setState({ pictures: response.data.photos.photo });\n          console.log(this.state.pictures)\n          console.log(this.state.query)\n        }\n      })\n      .catch(error => {\n        console.log(\"Error fetching data\", error);\n      })\n  }\n\n  render() {\n    return (\n      <BrowserRouter>\n        <div className=\"container\">\n          <Search onSearch={this.performSearch} />\n          <Nav />\n          <Switch>\n            <Route exact path=\"/\" render={() => <Redirect to=\"/mountain\" />} />\n            <Route path=\"/mountain\" render={() => <Gallery data={this.state.mountain} onSearch={this.performSearch} loading={this.state.loading} query=\"mountain\" />} />\n            <Route path=\"/forest\" render={() => <Gallery data={this.state.forest} onSearch={this.performSearch} loading={this.state.loading} query=\"forest\" />} />\n            <Route path=\"/beach\" render={() => <Gallery data={this.state.beach} onSearch={this.performSearch} loading={this.state.loading} query=\"beach\" />} />\n            {/* <Route path=\"/search/:random\" render={() => <Gallery data={this.state.random} onSearch={this.performSearch} loading={this.state.loading} query={this.state.random} />} /> */}\n            <Route path=\"/?search/:query\" render={() => <Gallery data={this.state.pictures} onSearch={this.performSearch} loading={this.state.loading} query={this.state.query} />} />\n            <Route component={NotFound} />\n          </Switch>\n        </div>\n      </BrowserRouter>\n    )\n  }\n};\n"]},"metadata":{},"sourceType":"module"}